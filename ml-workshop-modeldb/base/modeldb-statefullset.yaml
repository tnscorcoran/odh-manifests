---
# Source: modeldb/charts/backend/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: modeldb
    component: backend
  name: modeldb-backend
spec:
  selector:
    matchLabels:
      app: modeldb
      component: backend
  serviceName: modeldb-headless
  template:
    metadata:
      labels:
        app: modeldb
        component: backend
      annotations:
        checksum/config: 451c18b334cc2e0d9500f5d1fc29dcf51e72715a8da0e634a81ebd914aa7813c
        verta.ai/disable_anti_affinity: "true"
    spec:
      containers:
        - image: vertaaiofficial/modeldb-backend:2.0.8.1
          env:
            - name: VERTA_MODELDB_CONFIG
              value: /config-backend/config.yaml
          imagePullPolicy: Always
          name: backend
          ports:
            - containerPort: 8085
              name: backend
            - containerPort:  8086
              name: artifactstore
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:8085", "-service=ready"]
            initialDelaySeconds: 5
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:8085", "-service=live"]
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 15
          lifecycle:
            preStop:
              exec:
                command: [
                    "/bin/sh", "-c",
                    "sleep 10",
                ]
          resources:
            limits:
              cpu: 750m
              memory: 1Gi
            requests:
              cpu: 750m
              memory: 1Gi
          volumeMounts:
            - mountPath: /config-backend
              name: modeldb-secret-volume
              readOnly: true
            - mountPath: "/artifact-store/"
              name: modeldb
#              subPath:
        - image:  vertaaiofficial/modeldb-proxy:2.0.8.1
          imagePullPolicy: Always
          name: proxy
          env:
            - name: MDB_ADDRESS
              value: localhost:8085
            - name: SERVER_HTTP_PORT
              value: "3000"
          ports:
            - containerPort: 3000
              name: http
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 500m
              memory: 256Mi

      volumes:
        - name: modeldb-secret-volume
          secret:
            secretName: modeldb-backend-config-secret
  volumeClaimTemplates:
    - metadata:
        labels:
          app: modeldb
          component: backend
        name: modeldb
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "100Gi"
---
# Source: modeldb/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: modeldb-postgresql
  labels:
    app: postgresql
    chart: postgresql-3.16.1
    release: "modeldb"
    heritage: "Helm"
spec:
  serviceName: modeldb-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "modeldb"
      role: master
  template:
    metadata:
      name: modeldb-postgresql
      labels:
        app: postgresql
        chart: postgresql-3.16.1
        release: "modeldb"
        heritage: "Helm"
        role: master
    spec:
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/minideb:latest
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          command:
            - sh
            - -c
            - |
              chown -R 1001:1001 /bitnami
              if [ -d /bitnami/postgresql/data ]; then
                chmod  0700 /bitnami/postgresql/data;
              fi


          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
#              subPath:
      containers:
        - name: modeldb-postgresql
          image: docker.io/bitnami/postgresql:10.7.0
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: PGDATA
              value: "/bitnami/postgresql"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: modeldb-postgresql
                  key: postgresql-password
          ports:
            - name: postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U "postgres" -h localhost
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U "postgres" -h localhost
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
#              subPath:
#      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "16Gi"
